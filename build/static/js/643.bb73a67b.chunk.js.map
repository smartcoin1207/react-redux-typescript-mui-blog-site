{"version":3,"file":"static/js/643.bb73a67b.chunk.js","mappings":"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","sources":["redux/actionCreators/blogActions.tsx","redux/actionCreators/userActions.tsx"],"sourcesContent":["import { Dispatch } from \"redux\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport axios from \"../../services/axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { IAuth as Auth, IBasicData } from \"../../models/auth\";\r\n\r\nimport {\r\n  Action,\r\n  ActionType,\r\n  IAllCategories,\r\n  IGetCurrentGroup,\r\n  IGetCurrentCategory,\r\n  IGetCurrentGenre,\r\n  IGetCurrentBlog,\r\n  ISetCurrentPage,\r\n} from \"../actionTypes/blogActionTypes\";\r\n\r\nimport { ToastMessage } from \"../../util/toast\";\r\n\r\ntype Config = {\r\n  headers: Record<string, string>;\r\n};\r\n\r\nexport const setCurrentPage  = \r\n  (page: string): any => async (dispatch: Dispatch<Action>) => {\r\n      dispatch<ISetCurrentPage>({\r\n        type: ActionType.SET_CURRENT_PAGE,\r\n        payload: page\r\n      });\r\n  };\r\n\r\nexport const getAllCategories =\r\n  (): any => async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/category/allcategories`\r\n      );\r\n\r\n      dispatch<IAllCategories>({\r\n        type: ActionType.GET_ALL_CATEGORIES,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const getCurrentGroup =\r\n  (id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/category/currentgroup/${id}`\r\n      );\r\n\r\n      dispatch<IGetCurrentGroup>({\r\n        type: ActionType.GET_CURRENT_GROUP,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const getCurrentCategory =\r\n  (id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/genre/currentcategory/${id}`\r\n      );\r\n\r\n      dispatch<IGetCurrentCategory>({\r\n        type: ActionType.GET_CURRENT_CATEGORY,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const getCurrentGenre =\r\n  (id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/blog/currentgenre/${id}`\r\n      );\r\n\r\n      dispatch<IGetCurrentGenre>({\r\n        type: ActionType.GET_CURRENT_GENRE,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const AddStep =\r\n  (navigate: any, step: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/category/create`,\r\n        step,\r\n        config\r\n      );\r\n\r\n      dispatch<IGetCurrentGroup>({\r\n        type: ActionType.GET_CURRENT_GROUP,\r\n        payload: response.data.current_group,\r\n      });\r\n      // navigate(\"/step/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\n  export const EditStep =\r\n  (navigate: any, step: any, id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/category/update/${id}`,\r\n        step,\r\n        config\r\n      );\r\n\r\n      dispatch<IGetCurrentGroup>({\r\n        type: ActionType.GET_CURRENT_GROUP,\r\n        payload: response.data.current_group,\r\n      });\r\n      // navigate(\"/step/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\n  export const DeleteStep =\r\n  (id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/category/delete/${id}`,\r\n        config\r\n      );\r\n\r\n      dispatch<IGetCurrentGroup>({\r\n        type: ActionType.GET_CURRENT_GROUP,\r\n        payload: response.data.current_group,\r\n      });\r\n      // navigate(\"/step/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const AddGenre =\r\n(navigate: any, step: any): any =>\r\nasync (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const config: Config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    const response: AxiosResponse<any> = await axios.post(\r\n      `/auth/genre/create`,\r\n      step,\r\n      config\r\n    );\r\n\r\n    dispatch<IGetCurrentCategory>({\r\n      type: ActionType.GET_CURRENT_CATEGORY,\r\n      payload: response.data.current_category,\r\n    });\r\n    // navigate(\"/step/index\");\r\n    ToastMessage(response);\r\n  } catch (err: any) {\r\n    ToastMessage(err.response);\r\n  }\r\n};\r\n\r\nexport const EditGenre =\r\n(navigate: any, step: any, id: any): any =>\r\nasync (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const config: Config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    const response: AxiosResponse<any> = await axios.post(\r\n      `/auth/genre/update/${id}`,\r\n      step,\r\n      config\r\n    );\r\n\r\n    dispatch<IGetCurrentCategory>({\r\n      type: ActionType.GET_CURRENT_CATEGORY,\r\n      payload: response.data.current_category,\r\n    });\r\n    // navigate(\"/step/index\");\r\n    ToastMessage(response);\r\n  } catch (err: any) {\r\n    ToastMessage(err.response);\r\n  }\r\n};\r\n\r\nexport const DeleteGenre =\r\n(id: any): any =>\r\nasync (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const config: Config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    const response: AxiosResponse<any> = await axios.post(\r\n      `/auth/genre/delete/${id}`,\r\n      config\r\n    );\r\n\r\n    dispatch<IGetCurrentCategory>({\r\n      type: ActionType.GET_CURRENT_CATEGORY,\r\n      payload: response.data.current_category   ,\r\n    });\r\n    // navigate(\"/step/index\");\r\n    ToastMessage(response);\r\n  } catch (err: any) {\r\n    ToastMessage(err.response);\r\n  }\r\n};\r\n\r\n\r\nexport const GetBlog =\r\n(navigate: any, id: any): any =>\r\nasync (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const config: Config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    const response: AxiosResponse<any> = await axios.get(\r\n      `/auth/blog/show/${id}`,\r\n      config\r\n    );\r\n\r\n    dispatch<IGetCurrentBlog>({\r\n        type: ActionType.GET_CURRENT_BLOG,\r\n        payload: response.data,\r\n      });\r\n\r\n    // if(response.status <300) {\r\n    //     navigate(`/blogs/blog/edit/${id}`);\r\n    // }\r\n  } catch (err: any) {\r\n    ToastMessage(err.response);\r\n  }\r\n};\r\n\r\n\r\nexport const AddBlog =\r\n(navigate: any, blog: any): any =>\r\nasync (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const config: Config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    const response: AxiosResponse<any> = await axios.post(\r\n      `/auth/blog/create`,\r\n      blog,\r\n      config\r\n    );\r\n    if(response.status < 300) {\r\n        navigate(`/blog/blogs/${blog?.genre_id}`);\r\n    }\r\n    ToastMessage(response);\r\n  } catch (err: any) {\r\n    ToastMessage(err.response);\r\n  }\r\n};\r\n\r\nexport const UpdateBlog =\r\n(navigate: any, blog: any, id: any): any =>\r\nasync (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const config: Config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    const response: AxiosResponse<any> = await axios.post(\r\n      `/auth/blog/update/${id}`,\r\n      blog,\r\n      config\r\n    );\r\n\r\n    if(response.status <300) {\r\n        navigate(`/blog/show/${id}`);\r\n    }\r\n    ToastMessage(response);\r\n  } catch (err: any) {\r\n    ToastMessage(err.response);\r\n  }\r\n};\r\n\r\nexport const DeleteBlog =\r\n(id: any): any =>\r\nasync (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const config: Config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    const response: AxiosResponse<any> = await axios.post(\r\n      `/auth/blog/delete/${id}`,\r\n      config\r\n    );\r\n\r\n    dispatch<IGetCurrentGenre>({\r\n      type: ActionType.GET_CURRENT_GENRE,\r\n      payload: response.data.current_genre\r\n    });\r\n    ToastMessage(response);\r\n  } catch (err: any) {\r\n    ToastMessage(err.response);\r\n  }\r\n};\r\n","import { Dispatch } from \"redux\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport axios from \"../../services/axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { IAuth as Auth, IBasicData } from \"../../models/auth\";\r\nimport { ThunkResult } from \"./actionResultTypes\";\r\n\r\nimport {\r\n  Action,\r\n  ActionType,\r\n  IUserProfileStart,\r\n  IUserProfileSuccess,\r\n  IUserProfileFail,\r\n  ICreateUserStart,\r\n  ICreateUserSuccess,\r\n  ICreateUserFail,\r\n  IGetUserStart,\r\n  IGetUserSuccess,\r\n  IGetUserFail,\r\n  IGetBasicCategoriesSuccess,\r\n  IGetAllGroups,\r\n  IGetAllCategories,\r\n  IGetAllGenres,\r\n  IGetBlogs,\r\n  IGetBlog,\r\n  IGetNewBlog,\r\n  ISearchBlogs,\r\n  IGetUserById,\r\n} from \"../actionTypes/userActionTypes\";\r\n\r\nimport { ToastMessage } from \"../../util/toast\";\r\n\r\ntype Config = {\r\n  headers: Record<string, string>;\r\n};\r\n\r\nexport const getData = (): any => async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const response: AxiosResponse<IBasicData> = await axios.get(\r\n      `/auth/user/categories`\r\n    );\r\n\r\n    dispatch<IGetBasicCategoriesSuccess>({\r\n      type: ActionType.GET_BASIC_CATEGORIES_SUCCESS,\r\n      payload: response.data,\r\n    });\r\n  } catch (error: any) {\r\n    ToastMessage(error.response);\r\n  }\r\n};\r\n\r\nexport const getAllGroups = (): any => async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const response: AxiosResponse<IBasicData> = await axios.get(\r\n      `/auth/user/group/getall`\r\n    );\r\n\r\n    dispatch<IGetAllGroups>({\r\n      type: ActionType.GET_ALL_GROUPS,\r\n      payload: response.data,\r\n    });\r\n  } catch (error: any) {\r\n    ToastMessage(error.response);\r\n  }\r\n};\r\n\r\nexport const getAllCategories =\r\n  (): any => async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/category/all`\r\n      );\r\n\r\n      dispatch<IGetAllCategories>({\r\n        type: ActionType.GET_ALL_CATEGORIES,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const getAllGenres = (): any => async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const response: AxiosResponse<any> = await axios.get(`/auth/genre/all`);\r\n\r\n    dispatch<IGetAllGenres>({\r\n      type: ActionType.GET_ALL_GENRES,\r\n      payload: response.data,\r\n    });\r\n  } catch (error: any) {\r\n    ToastMessage(error.response);\r\n  }\r\n};\r\n\r\nexport const GetBlogs =\r\n  (genre_id: string): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/blog/${genre_id}`\r\n      );\r\n\r\n      dispatch<IGetBlogs>({\r\n        type: ActionType.GET_BLOGS,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const GetNewBlogs = (): any => async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const response: AxiosResponse<any> = await axios.get(\r\n      `/auth/blog/new_blogs`\r\n    );\r\n\r\n    dispatch<IGetNewBlog>({\r\n      type: ActionType.GET_NEW_BLOGS,\r\n      payload: response.data,\r\n    });\r\n  } catch (error: any) {\r\n    ToastMessage(error.response);\r\n  }\r\n};\r\n\r\nexport const GetSearchResult =\r\n  (search: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/blog/search`,\r\n        search\r\n      );\r\n\r\n      dispatch<ISearchBlogs>({\r\n        type: ActionType.GET_SEARCH_BLOGS,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const GetBlog =\r\n  (id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/blog/show/${id}`\r\n      );\r\n\r\n      dispatch<IGetBlog>({\r\n        type: ActionType.GET_BLOG,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const AddUser =\r\n  (navigate: any, user: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<Auth> = await axios.post(\r\n        `/auth/user/create`,\r\n        user,\r\n        config\r\n      );\r\n\r\n      dispatch<ICreateUserSuccess>({\r\n        type: ActionType.CREATE_USER_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n\r\n      navigate(\"/user/index\");\r\n    } catch (err: any) {\r\n      dispatch<ICreateUserFail>({\r\n        type: ActionType.CREATE_USER_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const EditUserAction =\r\n  (navigate: any, user: any, id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/user/update/${id}`,\r\n        user,\r\n        config\r\n      );\r\n      ToastMessage(response);\r\n      navigate(\"/user/index\");\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const DeleteUserAction =\r\n  (id: any, navigate: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      // alert(id);\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/user/delete/${id}`,\r\n        config\r\n      );\r\n\r\n      dispatch<IGetUserSuccess>({\r\n        type: ActionType.GET_USERS_SUCCESS,\r\n        payload: response.data.users,\r\n      });\r\n\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const AddLeader =\r\n  (navigate: any, user: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<Auth> = await axios.post(\r\n        `/auth/leader/create`,\r\n        user,\r\n        config\r\n      );\r\n\r\n      dispatch<ICreateUserSuccess>({\r\n        type: ActionType.CREATE_USER_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n\r\n      // navigate(\"/user/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n      dispatch<ICreateUserFail>({\r\n        type: ActionType.CREATE_USER_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const EditLeaderAction =\r\n  (navigate: any, user: any, id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/leader/update/${id}`,\r\n        user,\r\n        config\r\n      );\r\n      ToastMessage(response);\r\n      navigate(\"/user/index\");\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const GetUsers =\r\n  (navigate: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(`/auth/user/index`);\r\n\r\n      dispatch<IGetUserSuccess>({\r\n        type: ActionType.GET_USERS_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n      dispatch<IGetUserFail>({\r\n        type: ActionType.GET_USERS_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const GetUserById =\r\n  (id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/user/get/${id}`\r\n      );\r\n\r\n      dispatch<IGetUserById>({\r\n        type: ActionType.GET_USER_BY_ID,\r\n        payload: response.data,\r\n      });\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\n\r\nexport const AddGenre =\r\n  (navigate: any, step: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/genre/create`,\r\n        step,\r\n        config\r\n      );\r\n\r\n      // navigate(\"/genre/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const AddBlog =\r\n  (navigate: any, blog: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/blog/create`,\r\n        blog,\r\n        config\r\n      );\r\n\r\n      // navigate(\"/blog/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\n  export const ChangeUserStatus =\r\n  (navigate: any, id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/user/changestatus/${id}`,\r\n        config\r\n      );\r\n\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };"],"names":["setCurrentPage","page","dispatch","type","ActionType","payload","getAllCategories","axios","response","data","ToastMessage","getCurrentGroup","id","getCurrentCategory","getCurrentGenre","AddStep","navigate","step","config","headers","current_group","EditStep","DeleteStep","AddGenre","current_category","EditGenre","DeleteGenre","GetBlog","AddBlog","blog","status","genre_id","UpdateBlog","DeleteBlog","current_genre","GetNewBlogs","GetSearchResult","search","AddUser","user","EditUserAction","AddLeader","EditLeaderAction","GetUsers","GetUserById","ChangeUserStatus"],"sourceRoot":""}