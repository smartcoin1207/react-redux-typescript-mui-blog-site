{"version":3,"file":"static/js/902.96296d59.chunk.js","mappings":"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","sources":["pages/security/authentication/signIn.tsx"],"sourcesContent":["import React, { ReactElement, FC, useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormHelperText,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Link,\r\n  Typography,\r\n  Button,\r\n  Divider,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Google,\r\n  Twitter,\r\n  Facebook,\r\n} from \"@mui/icons-material\";\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nimport { Formik, FormikProps, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { AuthOTPLogin, AuthStart } from \"../../../redux/actionCreators/authActions\";\r\nimport { remove } from \"lodash\";\r\nimport { ThemeColor } from \"../../../styles/GlobalStyle\";\r\nimport { RootState } from \"../../../redux/store/store\";\r\nimport { stat } from \"fs\";\r\nimport { serverUrl } from \"../../../services/axios\";\r\n\r\nconst theme = createTheme({\r\n  components: {\r\n    MuiFormHelperText: {\r\n      styleOverrides: {\r\n        root: {\r\n          color: \"red\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst SignIn: FC = (): ReactElement => {\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const login_status = useSelector((state:RootState) => state.auth.login_status);\r\n  const qrScan = useSelector((state:RootState) => state.auth.qrScan);\r\n\r\n  const dispatch = useDispatch(); // Add this line to get the dispatch function\r\n  const handleClickShowPassword = () => setShowPassword((show) => !show);\r\n\r\n  const handleMouseDownPassword = (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const [qrCodeUrl, setQrCodeUrl] = useState('');\r\n  const [google2faSecret, setGoogle2faSecret] = useState('');\r\n  const [user_id, setUser_Id] = useState('');\r\n  const [password,  setPassword] = useState('');\r\n\r\n  const [isOtpStep, setIsOtpStep] = useState(false);\r\n  const [loginStatus, setLoginStatus] = useState('');\r\n  // const \r\n\r\n  interface values {\r\n    userId: string;\r\n    password: string;\r\n  }\r\n\r\n  const initialValues: values = {\r\n    userId: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  interface valuesOTP {\r\n    digitalCode: string;\r\n  }\r\n\r\n  const initialValuesOTP: valuesOTP = {\r\n    digitalCode:  \"\"\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(qrScan) {\r\n      setQrCodeUrl(qrScan.qr_codeurl ? qrScan.qr_codeurl : '' );\r\n      setGoogle2faSecret(qrScan.google2fa_secret ? qrScan.google2fa_secret : '' );\r\n    }\r\n  }, [qrScan])\r\n\r\n  useEffect(() => {\r\n    setLoginStatus(login_status);\r\n  }, [login_status])\r\n  \r\n  const validationSchema = Yup.object({\r\n    userId: Yup.string().required(\"ユーザーIDを入力してください\"),\r\n    password: Yup.string().required(\"パスワードを入力してください\"),\r\n  });\r\n\r\n  const validationSchemaOTP = Yup.object({\r\n    digitalCode: Yup.string().required(\"デジタルコードを入力してください\"),\r\n  });\r\n  const handleSubmit = (values: values) => {\r\n    dispatch(AuthStart(values.userId, values.password)); \r\n    setUser_Id(values.userId);\r\n    setPassword(values.password);\r\n  };\r\n\r\n  const goToOTP = () => {\r\n    setLoginStatus('OTP');\r\n  }\r\n\r\n  const handleOtpSubmit = (values: valuesOTP) => {\r\n    console.log()\r\n    dispatch(AuthOTPLogin(values.digitalCode, user_id, password)); \r\n  }\r\n\r\n  return (\r\n    <Box\r\n      display=\"block\"\r\n      m=\"auto\"\r\n      px={3}\r\n      // pt={3}\r\n      width={500}\r\n      borderRadius={4}      \r\n      \r\n      sx={{ boxShadow: {xs: 0, md: 12, ms:12}, backgroundColor: \"#ffffff\" }}\r\n    >\r\n\r\n      {loginStatus == '' && (\r\n        <>\r\n              <Box\r\n        flexGrow={1}\r\n        display=\"flex\"\r\n        py={2}\r\n        px={2}\r\n        sx={{\r\n          justifyContent: \"center\",\r\n          backgroundColor: \"inherit\",\r\n        }}\r\n      >\r\n        <Typography sx={{fontSize: '2rem', color: ThemeColor.main, fontWeight: '600'}} variant=\"h4\">ログイン</Typography>\r\n      </Box>\r\n      <Box display=\"block\" px={2} mb={2}>\r\n        <ThemeProvider theme={theme}>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {(formikProps: FormikProps<values>) => (\r\n              <Form>\r\n                <FormControl\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  sx={{mt: 2, fontSize: { xs: \"9pt\", sm: \"9pt\", md: \"10pt\" } }}\r\n                >\r\n                  {/* <InputLabel\r\n                    htmlFor=\"outlined-input-user-id\"\r\n                    sx={{ fontSize: { xs: \"9pt\", sm: \"10pt\", md: \"11pt\" } }}\r\n                  >\r\n                    ユーザーID\r\n                  </InputLabel> */}\r\n                  <Typography sx={{fontSize: '1.1rem',mb: 1,ml: 1,  fontWeight: '600'}} variant=\"h4\">ログイン</Typography>\r\n\r\n                  <Field\r\n                    as={OutlinedInput}\r\n                    id=\"outlined-input-user-id\"\r\n                    type=\"text\"\r\n                    placeholder=\"ユーザーID\"\r\n                    sx={{fontSize: '1.2rem'}}\r\n                    name=\"userId\"\r\n                    value={formikProps.values.userId} // Update the 'value' attribute\r\n                    aria-describedby=\"my-helper-text\"\r\n                  />\r\n                  {!!formikProps.touched.userId &&\r\n                    !!formikProps.errors.userId && ( // New conditional render\r\n                      <FormHelperText error>\r\n                        {formikProps.errors.userId}\r\n                      </FormHelperText>\r\n                    )}\r\n\r\n                  <br></br>\r\n                </FormControl>\r\n\r\n                <FormControl\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  sx={{ mt: 4,mb: 4,  fontSize: { xs: \"9pt\", sm: \"9pt\", md: \"10pt\" } }}\r\n                >\r\n                  <Typography sx={{fontSize: '1.1rem',mb: 1,  fontWeight: '600'}} variant=\"h4\">パスワード</Typography>\r\n\r\n                  <Field\r\n                    as={OutlinedInput}\r\n                    id=\"outlined-adornment-password\"\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    name=\"password\"\r\n                    placeholder=\"パスワード\"\r\n                    sx={{fontSize: '1.2rem'}}\r\n                    value={formikProps.values.password} // Update the 'value' attribute\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          aria-label=\"toggle password visibility\"\r\n                          onClick={handleClickShowPassword}\r\n                          onMouseDown={handleMouseDownPassword}\r\n                          edge=\"end\"\r\n                        >\r\n                          {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                    \r\n                    // label=\"パスワード\"\r\n                  />\r\n                  {!!formikProps.touched.password &&\r\n                    !!formikProps.errors.password && ( // New conditional render\r\n                      <FormHelperText error>\r\n                        {formikProps.errors.password}\r\n                      </FormHelperText>\r\n                    )}\r\n                </FormControl>\r\n           \r\n                <Box display=\"block\" justifyContent=\"center\" py={2}>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    type=\"submit\"\r\n                    sx={{ fontSize: { xs: \"1.1rem\", sm: \"1.1rem\", md: \"1.3rem\" } }}\r\n                  >\r\n                    ログインする\r\n                  </Button>\r\n                </Box>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </ThemeProvider>\r\n      </Box>\r\n        </>\r\n      )}\r\n\r\n      {loginStatus == 'QRSCAN' && (\r\n        <>\r\n          <Box sx={{textAlign: 'center'}}>\r\n          <Typography sx={{ color: ThemeColor.main}} variant=\"h6\">QRコードをスキャンしてください。</Typography>\r\n            <Box>\r\n            <img src={`${serverUrl}upload/qrcodes/${qrCodeUrl}`} alt=\"\" />\r\n            </Box>\r\n            <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    type=\"submit\"\r\n                    sx={{ mb: 4 }}\r\n                    onClick={()=>goToOTP()}\r\n                  >\r\n                    OTPログインページに移動します\r\n                  </Button>\r\n            </Box>\r\n        </>\r\n      )}\r\n\r\n{loginStatus == 'OTP' && (\r\n        <>\r\n              <Box\r\n        flexGrow={1}\r\n        display=\"flex\"\r\n        py={2}\r\n        px={2}\r\n        sx={{\r\n          justifyContent: \"center\",\r\n          backgroundColor: \"inherit\",\r\n        }}\r\n      >\r\n        <Typography sx={{fontSize: '2rem', color: ThemeColor.main, fontWeight: '600'}} variant=\"h4\">ログイン</Typography>\r\n      </Box>\r\n      <Box display=\"block\" px={2} mb={2}>\r\n        <ThemeProvider theme={theme}>\r\n          <Formik\r\n            initialValues={initialValuesOTP}\r\n            validationSchema={validationSchemaOTP}\r\n            onSubmit={handleOtpSubmit}\r\n          >\r\n            {(formikProps: FormikProps<valuesOTP>) => (\r\n              <Form>\r\n                <FormControl\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  sx={{mt: 2, fontSize: { xs: \"9pt\", sm: \"9pt\", md: \"10pt\" } }}\r\n                >\r\n\r\n                  <Typography sx={{mb: 1,ml: 1,}} variant=\"h6\">認証アプリで生成された OTP を入力してください。\r\n                    30 秒ごとに更新されるため、必ず現在のものを送信してください。</Typography>\r\n\r\n                    <Accordion>\r\n                      <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1a-content\"\r\n                        id=\"panel1a-header\"\r\n                      >\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                          <Box sx={{textAlign:'center'}}>\r\n                          <img src={`${serverUrl}upload/qrcodes/${qrCodeUrl}`} alt=\"\" />\r\n                          </Box>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n\r\n                          \r\n                  <Field\r\n                    as={OutlinedInput}\r\n                    id=\"outlined-input-user-id\"\r\n                    type=\"text\"\r\n                    placeholder=\"6 デジタルコード\"\r\n                    sx={{fontSize: '1.2rem'}}\r\n                    name=\"digitalCode\"\r\n                    value={formikProps.values.digitalCode} // Update the 'value' attribute\r\n                    aria-describedby=\"my-helper-text\"\r\n                  />\r\n                  {!!formikProps.touched.digitalCode &&\r\n                    !!formikProps.errors.digitalCode && ( // New conditional render\r\n                      <FormHelperText error>\r\n                        {formikProps.errors.digitalCode}\r\n                      </FormHelperText>\r\n                    )}\r\n\r\n                  <br></br>\r\n                </FormControl>\r\n           \r\n                <Box display=\"block\" justifyContent=\"center\" py={2}>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    type=\"submit\"\r\n                    sx={{ fontSize: { xs: \"1.1rem\", sm: \"1.1rem\", md: \"1.3rem\" } }}\r\n                  >\r\n                    ログインする\r\n                  </Button>\r\n                </Box>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </ThemeProvider>\r\n      </Box>\r\n        </>\r\n      )}\r\n\r\n\r\n\r\n\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n"],"names":["theme","createTheme","components","MuiFormHelperText","styleOverrides","root","color","React","showPassword","setShowPassword","login_status","useSelector","state","auth","qrScan","dispatch","useDispatch","handleClickShowPassword","show","handleMouseDownPassword","event","preventDefault","useState","qrCodeUrl","setQrCodeUrl","setGoogle2faSecret","user_id","setUser_Id","password","setPassword","loginStatus","setLoginStatus","useEffect","qr_codeurl","google2fa_secret","validationSchema","Yup","userId","required","validationSchemaOTP","digitalCode","display","m","px","width","borderRadius","sx","boxShadow","xs","md","ms","backgroundColor","flexGrow","py","justifyContent","fontSize","ThemeColor","fontWeight","variant","mb","initialValues","onSubmit","values","AuthStart","formikProps","fullWidth","size","mt","sm","ml","as","OutlinedInput","id","type","placeholder","name","value","touched","errors","error","endAdornment","position","onClick","onMouseDown","edge","textAlign","src","serverUrl","alt","console","log","AuthOTPLogin","expandIcon"],"sourceRoot":""}